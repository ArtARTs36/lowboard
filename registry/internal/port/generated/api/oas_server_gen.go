// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ApisApiIdDelete implements DELETE /apis/{apiId} operation.
	//
	// Delete an API by its ID.
	//
	// DELETE /apis/{apiId}
	ApisApiIdDelete(ctx context.Context, params ApisApiIdDeleteParams) error
	// ApisApiIdGet implements GET /apis/{apiId} operation.
	//
	// Retrieve details about a specific API.
	//
	// GET /apis/{apiId}
	ApisApiIdGet(ctx context.Context, params ApisApiIdGetParams) (*API, error)
	// ApisApiIdPut implements PUT /apis/{apiId} operation.
	//
	// Update an existing API.
	//
	// PUT /apis/{apiId}
	ApisApiIdPut(ctx context.Context, req *ApiUpdate, params ApisApiIdPutParams) (*API, error)
	// ApisGet implements GET /apis operation.
	//
	// Get list of all APIs.
	//
	// GET /apis
	ApisGet(ctx context.Context) ([]API, error)
	// ApisPost implements POST /apis operation.
	//
	// Create a new API.
	//
	// POST /apis
	ApisPost(ctx context.Context, req *ApiCreate) (*API, error)
	// ComponentsComponentNameDelete implements DELETE /components/{componentName} operation.
	//
	// Delete a component by its name.
	//
	// DELETE /components/{componentName}
	ComponentsComponentNameDelete(ctx context.Context, params ComponentsComponentNameDeleteParams) error
	// ComponentsComponentNamePut implements PUT /components/{componentName} operation.
	//
	// Update an existing component.
	//
	// PUT /components/{componentName}
	ComponentsComponentNamePut(ctx context.Context, req *ComponentUpdate, params ComponentsComponentNamePutParams) (*Component, error)
	// ComponentsGet implements GET /components operation.
	//
	// Get list of all components.
	//
	// GET /components
	ComponentsGet(ctx context.Context) ([]Component, error)
	// ComponentsPost implements POST /components operation.
	//
	// Create a new component.
	//
	// POST /components
	ComponentsPost(ctx context.Context, req *ComponentCreate) (*Component, error)
	// DeletePage implements DeletePage operation.
	//
	// Delete a page by its name.
	//
	// DELETE /pages/{pageName}
	DeletePage(ctx context.Context, params DeletePageParams) error
	// DeletePageComponent implements DeletePageComponent operation.
	//
	// Delete a page component by its ID.
	//
	// DELETE /page-components/{componentId}
	DeletePageComponent(ctx context.Context, params DeletePageComponentParams) error
	// GetComponent implements GetComponent operation.
	//
	// Retrieve details about a specific component.
	//
	// GET /components/{componentName}
	GetComponent(ctx context.Context, params GetComponentParams) (*Component, error)
	// GetDefinition implements GetDefinition operation.
	//
	// Get Config.
	//
	// GET /definition
	GetDefinition(ctx context.Context) (*Definition, error)
	// GetPageComponent implements GetPageComponent operation.
	//
	// Retrieve details about a specific page component.
	//
	// GET /page-components/{componentId}
	GetPageComponent(ctx context.Context, params GetPageComponentParams) (*PageComponent, error)
	// ListPageComponents implements ListPageComponents operation.
	//
	// Get list of all page components.
	//
	// GET /page-components
	ListPageComponents(ctx context.Context) ([]PageComponent, error)
	// PageComponentsPost implements POST /page-components operation.
	//
	// Create a new page component.
	//
	// POST /page-components
	PageComponentsPost(ctx context.Context, req *PageComponentCreate) (*PageComponent, error)
	// PagesGet implements GET /pages operation.
	//
	// Get list of all pages.
	//
	// GET /pages
	PagesGet(ctx context.Context) ([]Page, error)
	// PagesPageNameGet implements GET /pages/{pageName} operation.
	//
	// Retrieve details about a specific page.
	//
	// GET /pages/{pageName}
	PagesPageNameGet(ctx context.Context, params PagesPageNameGetParams) (*Page, error)
	// PagesPageNamePut implements PUT /pages/{pageName} operation.
	//
	// Update an existing page.
	//
	// PUT /pages/{pageName}
	PagesPageNamePut(ctx context.Context, req *PageUpdate, params PagesPageNamePutParams) (*Page, error)
	// PagesPost implements POST /pages operation.
	//
	// Create a new page.
	//
	// POST /pages
	PagesPost(ctx context.Context, req *PageCreate) (*Page, error)
	// PutPageComponent implements PutPageComponent operation.
	//
	// Update an existing page component.
	//
	// PUT /page-components/{componentId}
	PutPageComponent(ctx context.Context, req *PageComponentUpdate, params PutPageComponentParams) (*PageComponent, error)
	// SidebarLinksGet implements GET /sidebar-links operation.
	//
	// Get list of all sidebar links.
	//
	// GET /sidebar-links
	SidebarLinksGet(ctx context.Context) ([]SidebarLink, error)
	// SidebarLinksLinkIdDelete implements DELETE /sidebar-links/{linkId} operation.
	//
	// Delete a sidebar link by its ID.
	//
	// DELETE /sidebar-links/{linkId}
	SidebarLinksLinkIdDelete(ctx context.Context, params SidebarLinksLinkIdDeleteParams) error
	// SidebarLinksLinkIdGet implements GET /sidebar-links/{linkId} operation.
	//
	// Retrieve details about a specific sidebar link.
	//
	// GET /sidebar-links/{linkId}
	SidebarLinksLinkIdGet(ctx context.Context, params SidebarLinksLinkIdGetParams) (*SidebarLink, error)
	// SidebarLinksLinkIdPut implements PUT /sidebar-links/{linkId} operation.
	//
	// Update an existing sidebar link.
	//
	// PUT /sidebar-links/{linkId}
	SidebarLinksLinkIdPut(ctx context.Context, req *SidebarLinkUpdate, params SidebarLinksLinkIdPutParams) (*SidebarLink, error)
	// SidebarLinksPost implements POST /sidebar-links operation.
	//
	// Create a new sidebar link.
	//
	// POST /sidebar-links
	SidebarLinksPost(ctx context.Context, req *SidebarLinkCreate) (*SidebarLink, error)
	// SidebarsGet implements GET /sidebars operation.
	//
	// Get list of all sidebars.
	//
	// GET /sidebars
	SidebarsGet(ctx context.Context) ([]Sidebar, error)
	// SidebarsPost implements POST /sidebars operation.
	//
	// Create a new sidebar.
	//
	// POST /sidebars
	SidebarsPost(ctx context.Context, req *SidebarCreate) (*Sidebar, error)
	// SidebarsSidebarNameDelete implements DELETE /sidebars/{sidebarName} operation.
	//
	// Delete a sidebar by its name.
	//
	// DELETE /sidebars/{sidebarName}
	SidebarsSidebarNameDelete(ctx context.Context, params SidebarsSidebarNameDeleteParams) error
	// SidebarsSidebarNameGet implements GET /sidebars/{sidebarName} operation.
	//
	// Retrieve details about a specific sidebar.
	//
	// GET /sidebars/{sidebarName}
	SidebarsSidebarNameGet(ctx context.Context, params SidebarsSidebarNameGetParams) (*Sidebar, error)
	// SidebarsSidebarNamePut implements PUT /sidebars/{sidebarName} operation.
	//
	// Update an existing sidebar.
	//
	// PUT /sidebars/{sidebarName}
	SidebarsSidebarNamePut(ctx context.Context, req *SidebarUpdate, params SidebarsSidebarNamePutParams) (*Sidebar, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
