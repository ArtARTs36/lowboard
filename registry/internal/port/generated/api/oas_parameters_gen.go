// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ApisApiIdDeleteParams is parameters of DELETE /apis/{apiId} operation.
type ApisApiIdDeleteParams struct {
	// ID of the API to retrieve/update/delete.
	ApiId string
}

func unpackApisApiIdDeleteParams(packed middleware.Parameters) (params ApisApiIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "apiId",
			In:   "path",
		}
		params.ApiId = packed[key].(string)
	}
	return params
}

func decodeApisApiIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params ApisApiIdDeleteParams, _ error) {
	// Decode path: apiId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "apiId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApiId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "apiId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ApisApiIdGetParams is parameters of GET /apis/{apiId} operation.
type ApisApiIdGetParams struct {
	// ID of the API to retrieve/update/delete.
	ApiId string
}

func unpackApisApiIdGetParams(packed middleware.Parameters) (params ApisApiIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "apiId",
			In:   "path",
		}
		params.ApiId = packed[key].(string)
	}
	return params
}

func decodeApisApiIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params ApisApiIdGetParams, _ error) {
	// Decode path: apiId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "apiId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApiId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "apiId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ApisApiIdPutParams is parameters of PUT /apis/{apiId} operation.
type ApisApiIdPutParams struct {
	// ID of the API to retrieve/update/delete.
	ApiId string
}

func unpackApisApiIdPutParams(packed middleware.Parameters) (params ApisApiIdPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "apiId",
			In:   "path",
		}
		params.ApiId = packed[key].(string)
	}
	return params
}

func decodeApisApiIdPutParams(args [1]string, argsEscaped bool, r *http.Request) (params ApisApiIdPutParams, _ error) {
	// Decode path: apiId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "apiId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ApiId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "apiId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ComponentsComponentNameDeleteParams is parameters of DELETE /components/{componentName} operation.
type ComponentsComponentNameDeleteParams struct {
	// Name of the component to retrieve/update/delete.
	ComponentName string
}

func unpackComponentsComponentNameDeleteParams(packed middleware.Parameters) (params ComponentsComponentNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "componentName",
			In:   "path",
		}
		params.ComponentName = packed[key].(string)
	}
	return params
}

func decodeComponentsComponentNameDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params ComponentsComponentNameDeleteParams, _ error) {
	// Decode path: componentName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "componentName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ComponentName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "componentName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ComponentsComponentNamePutParams is parameters of PUT /components/{componentName} operation.
type ComponentsComponentNamePutParams struct {
	// Name of the component to retrieve/update/delete.
	ComponentName string
}

func unpackComponentsComponentNamePutParams(packed middleware.Parameters) (params ComponentsComponentNamePutParams) {
	{
		key := middleware.ParameterKey{
			Name: "componentName",
			In:   "path",
		}
		params.ComponentName = packed[key].(string)
	}
	return params
}

func decodeComponentsComponentNamePutParams(args [1]string, argsEscaped bool, r *http.Request) (params ComponentsComponentNamePutParams, _ error) {
	// Decode path: componentName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "componentName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ComponentName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "componentName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeletePageParams is parameters of DeletePage operation.
type DeletePageParams struct {
	// Name of the page to retrieve/update/delete.
	PageName string
}

func unpackDeletePageParams(packed middleware.Parameters) (params DeletePageParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageName",
			In:   "path",
		}
		params.PageName = packed[key].(string)
	}
	return params
}

func decodeDeletePageParams(args [1]string, argsEscaped bool, r *http.Request) (params DeletePageParams, _ error) {
	// Decode path: pageName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pageName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PageName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeletePageComponentParams is parameters of DeletePageComponent operation.
type DeletePageComponentParams struct {
	// ID of the page component to retrieve/update/delete.
	ComponentId string
}

func unpackDeletePageComponentParams(packed middleware.Parameters) (params DeletePageComponentParams) {
	{
		key := middleware.ParameterKey{
			Name: "componentId",
			In:   "path",
		}
		params.ComponentId = packed[key].(string)
	}
	return params
}

func decodeDeletePageComponentParams(args [1]string, argsEscaped bool, r *http.Request) (params DeletePageComponentParams, _ error) {
	// Decode path: componentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "componentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ComponentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "componentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetComponentParams is parameters of GetComponent operation.
type GetComponentParams struct {
	// Name of the component to retrieve/update/delete.
	ComponentName string
}

func unpackGetComponentParams(packed middleware.Parameters) (params GetComponentParams) {
	{
		key := middleware.ParameterKey{
			Name: "componentName",
			In:   "path",
		}
		params.ComponentName = packed[key].(string)
	}
	return params
}

func decodeGetComponentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetComponentParams, _ error) {
	// Decode path: componentName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "componentName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ComponentName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "componentName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPageComponentParams is parameters of GetPageComponent operation.
type GetPageComponentParams struct {
	// ID of the page component to retrieve/update/delete.
	ComponentId string
}

func unpackGetPageComponentParams(packed middleware.Parameters) (params GetPageComponentParams) {
	{
		key := middleware.ParameterKey{
			Name: "componentId",
			In:   "path",
		}
		params.ComponentId = packed[key].(string)
	}
	return params
}

func decodeGetPageComponentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPageComponentParams, _ error) {
	// Decode path: componentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "componentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ComponentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "componentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PagesPageNameGetParams is parameters of GET /pages/{pageName} operation.
type PagesPageNameGetParams struct {
	// Name of the page to retrieve/update/delete.
	PageName string
}

func unpackPagesPageNameGetParams(packed middleware.Parameters) (params PagesPageNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageName",
			In:   "path",
		}
		params.PageName = packed[key].(string)
	}
	return params
}

func decodePagesPageNameGetParams(args [1]string, argsEscaped bool, r *http.Request) (params PagesPageNameGetParams, _ error) {
	// Decode path: pageName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pageName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PageName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PagesPageNamePutParams is parameters of PUT /pages/{pageName} operation.
type PagesPageNamePutParams struct {
	// Name of the page to retrieve/update/delete.
	PageName string
}

func unpackPagesPageNamePutParams(packed middleware.Parameters) (params PagesPageNamePutParams) {
	{
		key := middleware.ParameterKey{
			Name: "pageName",
			In:   "path",
		}
		params.PageName = packed[key].(string)
	}
	return params
}

func decodePagesPageNamePutParams(args [1]string, argsEscaped bool, r *http.Request) (params PagesPageNamePutParams, _ error) {
	// Decode path: pageName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pageName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PageName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PutPageComponentParams is parameters of PutPageComponent operation.
type PutPageComponentParams struct {
	// ID of the page component to retrieve/update/delete.
	ComponentId string
}

func unpackPutPageComponentParams(packed middleware.Parameters) (params PutPageComponentParams) {
	{
		key := middleware.ParameterKey{
			Name: "componentId",
			In:   "path",
		}
		params.ComponentId = packed[key].(string)
	}
	return params
}

func decodePutPageComponentParams(args [1]string, argsEscaped bool, r *http.Request) (params PutPageComponentParams, _ error) {
	// Decode path: componentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "componentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ComponentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "componentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SidebarLinksLinkIdDeleteParams is parameters of DELETE /sidebar-links/{linkId} operation.
type SidebarLinksLinkIdDeleteParams struct {
	// ID of the sidebar link to retrieve/update/delete.
	LinkId string
}

func unpackSidebarLinksLinkIdDeleteParams(packed middleware.Parameters) (params SidebarLinksLinkIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "linkId",
			In:   "path",
		}
		params.LinkId = packed[key].(string)
	}
	return params
}

func decodeSidebarLinksLinkIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params SidebarLinksLinkIdDeleteParams, _ error) {
	// Decode path: linkId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "linkId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LinkId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "linkId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SidebarLinksLinkIdGetParams is parameters of GET /sidebar-links/{linkId} operation.
type SidebarLinksLinkIdGetParams struct {
	// ID of the sidebar link to retrieve/update/delete.
	LinkId string
}

func unpackSidebarLinksLinkIdGetParams(packed middleware.Parameters) (params SidebarLinksLinkIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "linkId",
			In:   "path",
		}
		params.LinkId = packed[key].(string)
	}
	return params
}

func decodeSidebarLinksLinkIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params SidebarLinksLinkIdGetParams, _ error) {
	// Decode path: linkId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "linkId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LinkId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "linkId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SidebarLinksLinkIdPutParams is parameters of PUT /sidebar-links/{linkId} operation.
type SidebarLinksLinkIdPutParams struct {
	// ID of the sidebar link to retrieve/update/delete.
	LinkId string
}

func unpackSidebarLinksLinkIdPutParams(packed middleware.Parameters) (params SidebarLinksLinkIdPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "linkId",
			In:   "path",
		}
		params.LinkId = packed[key].(string)
	}
	return params
}

func decodeSidebarLinksLinkIdPutParams(args [1]string, argsEscaped bool, r *http.Request) (params SidebarLinksLinkIdPutParams, _ error) {
	// Decode path: linkId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "linkId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LinkId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "linkId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SidebarsSidebarNameDeleteParams is parameters of DELETE /sidebars/{sidebarName} operation.
type SidebarsSidebarNameDeleteParams struct {
	// Name of the sidebar to retrieve/update/delete.
	SidebarName string
}

func unpackSidebarsSidebarNameDeleteParams(packed middleware.Parameters) (params SidebarsSidebarNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "sidebarName",
			In:   "path",
		}
		params.SidebarName = packed[key].(string)
	}
	return params
}

func decodeSidebarsSidebarNameDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params SidebarsSidebarNameDeleteParams, _ error) {
	// Decode path: sidebarName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sidebarName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SidebarName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sidebarName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SidebarsSidebarNameGetParams is parameters of GET /sidebars/{sidebarName} operation.
type SidebarsSidebarNameGetParams struct {
	// Name of the sidebar to retrieve/update/delete.
	SidebarName string
}

func unpackSidebarsSidebarNameGetParams(packed middleware.Parameters) (params SidebarsSidebarNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "sidebarName",
			In:   "path",
		}
		params.SidebarName = packed[key].(string)
	}
	return params
}

func decodeSidebarsSidebarNameGetParams(args [1]string, argsEscaped bool, r *http.Request) (params SidebarsSidebarNameGetParams, _ error) {
	// Decode path: sidebarName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sidebarName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SidebarName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sidebarName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SidebarsSidebarNamePutParams is parameters of PUT /sidebars/{sidebarName} operation.
type SidebarsSidebarNamePutParams struct {
	// Name of the sidebar to retrieve/update/delete.
	SidebarName string
}

func unpackSidebarsSidebarNamePutParams(packed middleware.Parameters) (params SidebarsSidebarNamePutParams) {
	{
		key := middleware.ParameterKey{
			Name: "sidebarName",
			In:   "path",
		}
		params.SidebarName = packed[key].(string)
	}
	return params
}

func decodeSidebarsSidebarNamePutParams(args [1]string, argsEscaped bool, r *http.Request) (params SidebarsSidebarNamePutParams, _ error) {
	// Decode path: sidebarName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sidebarName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SidebarName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sidebarName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
