// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "apis"

				if l := len("apis"); len(elem) >= l && elem[0:l] == "apis" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleApisGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleApisPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "apiId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleApisApiIdDeleteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleApisApiIdGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleApisApiIdPutRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

				}

			case 'c': // Prefix: "components"

				if l := len("components"); len(elem) >= l && elem[0:l] == "components" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleComponentsGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleComponentsPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "componentName"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleComponentsComponentNameDeleteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetComponentRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleComponentsComponentNamePutRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

				}

			case 'd': // Prefix: "definition"

				if l := len("definition"); len(elem) >= l && elem[0:l] == "definition" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetDefinitionRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'p': // Prefix: "page"

				if l := len("page"); len(elem) >= l && elem[0:l] == "page" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-components"

					if l := len("-components"); len(elem) >= l && elem[0:l] == "-components" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListPageComponentsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePageComponentsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "componentId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeletePageComponentRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetPageComponentRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handlePutPageComponentRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handlePagesGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePagesPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "pageName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeletePageRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handlePagesPageNameGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handlePagesPageNamePutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				}

			case 's': // Prefix: "sidebar"

				if l := len("sidebar"); len(elem) >= l && elem[0:l] == "sidebar" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-links"

					if l := len("-links"); len(elem) >= l && elem[0:l] == "-links" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleSidebarLinksGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleSidebarLinksPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "linkId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleSidebarLinksLinkIdDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleSidebarLinksLinkIdGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleSidebarLinksLinkIdPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleSidebarsGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleSidebarsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "sidebarName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleSidebarsSidebarNameDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleSidebarsSidebarNameGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleSidebarsSidebarNamePutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "apis"

				if l := len("apis"); len(elem) >= l && elem[0:l] == "apis" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ApisGetOperation
						r.summary = "Get list of all APIs"
						r.operationID = ""
						r.pathPattern = "/apis"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = ApisPostOperation
						r.summary = "Create a new API"
						r.operationID = ""
						r.pathPattern = "/apis"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "apiId"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = ApisApiIdDeleteOperation
							r.summary = "Delete an API by its ID"
							r.operationID = ""
							r.pathPattern = "/apis/{apiId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = ApisApiIdGetOperation
							r.summary = "Retrieve details about a specific API"
							r.operationID = ""
							r.pathPattern = "/apis/{apiId}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = ApisApiIdPutOperation
							r.summary = "Update an existing API"
							r.operationID = ""
							r.pathPattern = "/apis/{apiId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'c': // Prefix: "components"

				if l := len("components"); len(elem) >= l && elem[0:l] == "components" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = ComponentsGetOperation
						r.summary = "Get list of all components"
						r.operationID = ""
						r.pathPattern = "/components"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = ComponentsPostOperation
						r.summary = "Create a new component"
						r.operationID = ""
						r.pathPattern = "/components"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "componentName"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = ComponentsComponentNameDeleteOperation
							r.summary = "Delete a component by its name"
							r.operationID = ""
							r.pathPattern = "/components/{componentName}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetComponentOperation
							r.summary = "Retrieve details about a specific component"
							r.operationID = "GetComponent"
							r.pathPattern = "/components/{componentName}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = ComponentsComponentNamePutOperation
							r.summary = "Update an existing component"
							r.operationID = ""
							r.pathPattern = "/components/{componentName}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'd': // Prefix: "definition"

				if l := len("definition"); len(elem) >= l && elem[0:l] == "definition" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetDefinitionOperation
						r.summary = "Get Config"
						r.operationID = "GetDefinition"
						r.pathPattern = "/definition"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'p': // Prefix: "page"

				if l := len("page"); len(elem) >= l && elem[0:l] == "page" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-components"

					if l := len("-components"); len(elem) >= l && elem[0:l] == "-components" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = ListPageComponentsOperation
							r.summary = "Get list of all page components"
							r.operationID = "ListPageComponents"
							r.pathPattern = "/page-components"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = PageComponentsPostOperation
							r.summary = "Create a new page component"
							r.operationID = ""
							r.pathPattern = "/page-components"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "componentId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeletePageComponentOperation
								r.summary = "Delete a page component by its ID"
								r.operationID = "DeletePageComponent"
								r.pathPattern = "/page-components/{componentId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetPageComponentOperation
								r.summary = "Retrieve details about a specific page component"
								r.operationID = "GetPageComponent"
								r.pathPattern = "/page-components/{componentId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = PutPageComponentOperation
								r.summary = "Update an existing page component"
								r.operationID = "PutPageComponent"
								r.pathPattern = "/page-components/{componentId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = PagesGetOperation
							r.summary = "Get list of all pages"
							r.operationID = ""
							r.pathPattern = "/pages"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = PagesPostOperation
							r.summary = "Create a new page"
							r.operationID = ""
							r.pathPattern = "/pages"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "pageName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeletePageOperation
								r.summary = "Delete a page by its name"
								r.operationID = "DeletePage"
								r.pathPattern = "/pages/{pageName}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = PagesPageNameGetOperation
								r.summary = "Retrieve details about a specific page"
								r.operationID = ""
								r.pathPattern = "/pages/{pageName}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = PagesPageNamePutOperation
								r.summary = "Update an existing page"
								r.operationID = ""
								r.pathPattern = "/pages/{pageName}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 's': // Prefix: "sidebar"

				if l := len("sidebar"); len(elem) >= l && elem[0:l] == "sidebar" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-links"

					if l := len("-links"); len(elem) >= l && elem[0:l] == "-links" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = SidebarLinksGetOperation
							r.summary = "Get list of all sidebar links"
							r.operationID = ""
							r.pathPattern = "/sidebar-links"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = SidebarLinksPostOperation
							r.summary = "Create a new sidebar link"
							r.operationID = ""
							r.pathPattern = "/sidebar-links"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "linkId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = SidebarLinksLinkIdDeleteOperation
								r.summary = "Delete a sidebar link by its ID"
								r.operationID = ""
								r.pathPattern = "/sidebar-links/{linkId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = SidebarLinksLinkIdGetOperation
								r.summary = "Retrieve details about a specific sidebar link"
								r.operationID = ""
								r.pathPattern = "/sidebar-links/{linkId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = SidebarLinksLinkIdPutOperation
								r.summary = "Update an existing sidebar link"
								r.operationID = ""
								r.pathPattern = "/sidebar-links/{linkId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = SidebarsGetOperation
							r.summary = "Get list of all sidebars"
							r.operationID = ""
							r.pathPattern = "/sidebars"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = SidebarsPostOperation
							r.summary = "Create a new sidebar"
							r.operationID = ""
							r.pathPattern = "/sidebars"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "sidebarName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = SidebarsSidebarNameDeleteOperation
								r.summary = "Delete a sidebar by its name"
								r.operationID = ""
								r.pathPattern = "/sidebars/{sidebarName}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = SidebarsSidebarNameGetOperation
								r.summary = "Retrieve details about a specific sidebar"
								r.operationID = ""
								r.pathPattern = "/sidebars/{sidebarName}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = SidebarsSidebarNamePutOperation
								r.summary = "Update an existing sidebar"
								r.operationID = ""
								r.pathPattern = "/sidebars/{sidebarName}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}
